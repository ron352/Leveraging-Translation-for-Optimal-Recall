# -*- coding: utf-8 -*-
"""News_Translation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1116uL_RkU2LS54CByNTbg94ZiNqTC6Xv
"""

!pip install SentencePiece
from transformers import MarianMTModel, MarianTokenizer
import torch
class TranslateMain:
    def __init__(self, model_name_fwd='Helsinki-NLP/opus-mt-en-es', model_name_reverse='Helsinki-NLP/opus-mt-es-en'):
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.model_fwd = MarianMTModel.from_pretrained(model_name_fwd)
        self.tokenizer_fwd = MarianTokenizer.from_pretrained(model_name_fwd)
        self.model_reverse = MarianMTModel.from_pretrained(model_name_reverse)
        self.tokenizer_reverse = MarianTokenizer.from_pretrained(model_name_reverse)

    def translate_pass(self, texts, pass_fwd_or_rev):
        if pass_fwd_or_rev == 'fwd':
            tokenizer = self.tokenizer_fwd
            model = self.model_fwd.to(self.device)
        else:
            tokenizer = self.tokenizer_reverse
            model = self.model_reverse.to(self.device)
        # Tokenize input texts
        input_ids = tokenizer.batch_encode_plus(texts, return_tensors='pt', padding=True, truncation=True)['input_ids']

        input_ids = input_ids.to(self.device)
        # Perform translation
        output_ids = model.generate(input_ids)

        # output_ids = output_ids.to('cpu')

        # Decode the translated texts
        translated_texts = tokenizer.batch_decode(output_ids, skip_special_tokens=True)

        input_ids.to('cpu')
        return translated_texts

    def rephrase_using_translation(self, texts):
        fwd_pass_text = self.translate_pass(texts, pass_fwd_or_rev='fwd')
        print(f'Intermediate translation: {fwd_pass_text}')
        rev_pass_text = self.translate_pass(fwd_pass_text, pass_fwd_or_rev='rev')
        return fwd_pass_text, rev_pass_text

# # Example usage
# translator = TranslateMain()

# texts_to_translate = ["Hello, how are you?", "@PhotOle, we also walked down to the blockade tonight for dinner and saw it, but were unaware of the situation."]
# rephrased_texts = translator.rephrase_using_translation(texts_to_translate)

# for original_text, rephrased_text in zip(texts_to_translate, rephrased_texts):
#     print(f"Original: {original_text}")
#     print(f"Rephrased: {rephrased_text}")
#     print()

"""# New Section"""